
// breakpoint map
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);

// min -> min breakpoint -> max -> max breakpoint
@mixin media-query($type-one: null, $breakpoint-one: null, $type-two: null, $breakpoint-two: null) {
  // if mq from min and till max value
  @if $type-one == min and map_has_key($breakpoints, $breakpoint-one) and
      $type-two == max and map_has_key($breakpoints, $breakpoint-two) {

    $type-min: $type-one;
    $type-max: $type-two;

    $breakpoint-min: map_get($breakpoints, $breakpoint-one);
    $breakpoint-max: map_get($breakpoints, $breakpoint-two);

    $breakpoint-max: $breakpoint-max - 1px;

    @warn $type-min, $breakpoint-min, $type-max, $breakpoint-max;
    @media only screen and (#{$type-min}-width: $breakpoint-min) and (#{$type-max}-width: $breakpoint-max) {
      @content;
    }
  }
  // mq from 0 till max value
  @else if $type-one == min and map_has_key($breakpoints, $breakpoint-one) {
    $type-min: $type-one;
    $breakpoint-min: map_get($breakpoints, $breakpoint-one);

    @warn $type-min, $breakpoint-min;
    @media only screen and (#{$type-min}-width: $breakpoint-min) {
      @content;
    }
  }
  // mq from min value up âˆž
  @else if $type-one == max and map_has_key($breakpoints, $breakpoint-one) {
    $type-max: $type-one;
    $breakpoint-max: map_get($breakpoints, $breakpoint-one);

    @warn $type-max, $breakpoint-max;
    @media only screen and (#{$type-max}-width: $breakpoint-max) {
      @content;
    }
  }
}

// may be moved
// --------- grid-helpers
$container-padding: rem(24px);
$grid-width: rem(map-get($breakpoints, desktop));

@mixin container-padding(){
  padding-right: $container-padding;
  padding-left: $container-padding;
}

@mixin container-grid(){
  max-width: $grid-width;
  width: $grid-width + 2*$container-padding;
  margin: 0 auto;
  @include container-padding;
}
// -------



// calc rem from pixel mixin
@mixin rem($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

// mixin ti display images in retina res on retina displays
@mixin retina-img($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// ------ linear gradient mixin
// check https://www.sitepoint.com/building-linear-gradient-mixin-sass/
@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
// Test if `$value` is a valid direction
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  @return $is-keyword or $is-angle;
}
// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }
  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  @return 90deg - $value;
}
// ----- end linear gradient mixin
